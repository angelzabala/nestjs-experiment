1. (DONE) GENERAR DOCUMENTACION AUTOMATICAMENTE USANDO ZOD-OPENAPI DE NPM
2. (DONE) ASEGURARME QUE NO SE LLAMEN DE MANERA REPETIDA EN LA DOCUMENTACION
3. (DONE) INTENTAR QUE LA DOCUMENTACION DE LOS ENDPOINTS SE GENERE AUTOMATICAMENTE
4. (DONE) VERIFICAR QUE NO HAYA LLAMADAS QUE NO USEN COSAS
5. DECIRLE A CURSOR QUE CREE UN CASO DE USO QUE LLAME A OTRO PARA VER COMO SE MANEJA DE MANERA APROPIADA LA CONEXION ENTRE CASOS DE USO
6. AGREGAR UN LINTER CON REGLAS COHERENTES y QUE TODAS LAS VARIABLES SEAN EN SNAKE_CASE
7. AGREGAR PRECOMMIT QUE VALIDE QUE LOS COMMITS SEAN =>  [<COMMIT-TYPE>-TICKET-<NUMBER>]: <MENSAJE>
8. GENERAR TESTS DE AMBAS ENTIDADES DIGAMOS ORDER Y QUE USE ALGO COMO EL EMAIL PARA RELACIONARLOS
9. GENERAR OTRO REPO SIMILAR CON NESTJS/POSTGRES/PRISMA

PENDING CHORES AND FUTURE IMPROVEMENTS
=====================================

AUTHENTICATION & AUTHORIZATION
-----------------------------
- Implement JWT authentication
- Add role-based access control
- Create user registration and login endpoints
- Implement password reset functionality
- Add refresh token mechanism

FEATURES
--------
- Add pagination metadata to list responses
- Implement soft delete for users
- Add user profile picture upload
- Create user activity logging
- Implement email verification

TESTING
-------
- Add unit tests for all use cases
- Create integration tests for database operations
- Implement E2E tests for API endpoints
- Add test coverage reporting

PERFORMANCE
-----------
- Implement caching for frequently accessed data
- Add database indexing for common queries
- Optimize response payloads
- Implement rate limiting

DOCUMENTATION
-------------
- Complete API documentation with examples
- Add code comments for complex logic
- Create developer onboarding guide
- Document database schema

INFRASTRUCTURE
--------------
- Set up CI/CD pipeline
- Create Docker deployment configuration
- Add health check endpoints
- Implement logging and monitoring
- Configure production-ready database setup

CODE QUALITY
------------
- Add more comprehensive error handling
- Implement consistent logging strategy
- Refactor any duplicate code
- Add code quality checks (linting, formatting)
- Review and optimize database queries

SECURITY
--------
- Implement CORS configuration
- Add CSRF protection
- Set up security headers
- Implement input sanitization
- Add API key management for external services 